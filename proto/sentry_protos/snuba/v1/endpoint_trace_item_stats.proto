syntax = "proto3";

package sentry_protos.snuba.v1;

import "sentry_protos/snuba/v1/request_common.proto";
import "sentry_protos/snuba/v1/trace_item_attribute.proto";
import "sentry_protos/snuba/v1/trace_item_filter.proto";

message AttributeDistributionsRequest {
  // max_buckets and limit wouldn't apply to other stats types (like totals)
  uint32 max_buckets = 1;
  uint32 max_attributes = 2;
}

/*
   This is a request for a heatmap, the x-axis is every distinct value of x_attribute,
   the y-axis is the numerical_y_attribute divided into num_y_buckets buckets. A
   single x,y coordinate has the count of trace-items that fit into that bucket.

   Example Request:
   x_attribute = "span.op"
   numerical_y_attribute = "eap.duration"
   num_y_buckets = 4

   Example Response:
   span.op = "db.query"
    - duration 0-100ms: 10
    - duration 100-200ms: 30
    - duration 200-300ms: 20
    - duration 300-400ms: 0

   span.op = "http.server"
   ...
*/
message HeatmapRequest {
  AttributeKey x_attribute = 1;
  AttributeKey y_attribute = 2;
  // these are only used if the attribute is numeric and needs to be bucketed
  optional uint32 num_y_buckets = 3;
  optional uint32 num_x_buckets = 4;
}

message StatsType {
  oneof type {
    AttributeDistributionsRequest attribute_distributions = 1;
    HeatmapRequest heatmap = 2;
  }
}

message TraceItemStatsRequest {
  RequestMeta meta = 1;
  // same filter applies to all stats types requested
  TraceItemFilter filter = 2;
  repeated StatsType stats_types = 3;
}

message AttributeDistribution {
  message Bucket {
    string label = 1;
    float value = 2;
  }

  string attribute_name = 1;
  repeated Bucket buckets = 2;
}

message AttributeDistributions {
  repeated AttributeDistribution attributes = 1;
}

message MatrixColumn {
  AttributeValue x_label = 1;
  repeated float values = 2;
}

/*
   This is a heatmap, example heatmap:
   x_attribute = "span.op"
   y_attribute = "duration"
   y_buckets = [0-100, 100-200, 200-300, 300-400]
   data = [
     "db_query": [10, 20, 30, 40],
     "http_server": [50, 60, 70, 80],
   ]

   this means there are 20 trace-items with span.op = "db.query" and duration 100-200ms,
   etc.
*/
message Heatmap {
  AttributeKey x_attribute = 1;
  AttributeKey y_attribute = 2;
  repeated AttributeValue y_buckets = 3;
  // the `values` array in each MatrixColumn and `y_buckets` are associative arrays
  repeated MatrixColumn data = 4;
}

message TraceItemStatsResult {
  oneof result {
    AttributeDistributions attribute_distributions = 1;
    Heatmap heatmap = 2;
  }
}

// this is a response from the TraceItemStats endpoint
// it is the counterpart to TraceItemStatsRequest
message TraceItemStatsResponse {
  repeated TraceItemStatsResult results = 1;
  PageToken page_token = 2;
  ResponseMeta meta = 3;
}
