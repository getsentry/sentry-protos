syntax = "proto3";

package sentry_protos.snuba.v1;

import "google/protobuf/timestamp.proto";
import "sentry_protos/snuba/v1/downsampled_storage.proto";
import "sentry_protos/snuba/v1/trace_item_filter.proto";

message RequestMeta {
  // id of the organization we are querying data for
  uint64 organization_id = 1;

  // used for logging and metrics, ex: "snuba_admin", "eap", "replays", etc
  string cogs_category = 2;

  // identifier for where the request is coming from
  // ex: "api.profiling.landing-chart", "api.replay.details-page"
  string referrer = 3;

  // ids of the projects we are querying data for
  repeated uint64 project_ids = 4;

  // start timestamp we want to query data for
  google.protobuf.Timestamp start_timestamp = 5;

  // end timestamp we want to query data for
  google.protobuf.Timestamp end_timestamp = 6;

  // DEPRECATED (not implemented) - use trace_item_type instead
  TraceItemName trace_item_name = 7 [deprecated = true];

  // the type of the trace item you are querying
  TraceItemType trace_item_type = 8;

  // whether to include debug information in the response
  bool debug = 10;

  // a unique identifier for the request, user doesnt need to set this
  string request_id = 11;

  // how to query the downsampled storages
  DownsampledStorageConfig downsampled_storage_config = 12;
}

message ResponseMeta {
  // id of the request that this response relates to
  string request_id = 1;

  // Optional field that is included only if debug is true
  repeated QueryInfo query_info = 2;

  // metadata of how the query interacted wit the downsampled storages
  DownsampledStorageMeta downsampled_storage_meta = 3;
}

// DEPRECATED: use TraceItemType instead
enum TraceItemName {
  TRACE_ITEM_NAME_UNSPECIFIED = 0;
  TRACE_ITEM_NAME_EAP_SPANS = 1;
  TRACE_ITEM_NAME_EAP_ERRORS = 2;
}

enum TraceItemType {
  TRACE_ITEM_TYPE_UNSPECIFIED = 0;
  TRACE_ITEM_TYPE_SPAN = 1;
  TRACE_ITEM_TYPE_ERROR = 2;
  TRACE_ITEM_TYPE_LOG = 3;
  TRACE_ITEM_TYPE_UPTIME_CHECK = 4;
}

message PageToken {
  oneof value {
    // standard limit/offset pagination
    uint64 offset = 1;

    // Instead of using offset (which requires all the scanning and ordering),
    // the server sends back a filter clause to be added on to the filter conditions
    // which skips the previous results altogether, avoiding extra scanning and sorting
    TraceItemFilter filter_offset = 2;
  }
}

message QueryStats {
  int64 rows_read = 1;
  int64 columns_read = 2;
  int32 blocks = 4;
  int64 progress_bytes = 5;
  int32 max_threads = 8;
  TimingMarks timing_marks = 11;
}

message QueryMetadata {
  string sql = 1;
  string status = 2;
  string clickhouse_table = 3;
  bool final = 4;
  string query_id = 6;
  bool consistent = 7;
  bool cache_hit = 9;
  string cluster_name = 10;
}

message TimingMarks {
  int64 duration_ms = 1;
  map<string, int64> marks_ms = 2;
  map<string, string> tags = 3;
  int64 timestamp = 4;
}

message QueryInfo {
  QueryStats stats = 1;
  QueryMetadata metadata = 2;
  string trace_logs = 3;
}
