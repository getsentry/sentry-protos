syntax = "proto3";

package sentry_protos.sentry.v1alpha;

import "google/protobuf/timestamp.proto";

message RetryState {
  // Current attempt number
  int32 attempts = 1;

  // The classname or adapter type for the retry policy
  string kind = 2;

  // After this attempt the task should be discarded
  optional int32 discard_after_attempt = 3;

  // After this attempt the task should be put in the dead-letter-queue.
  optional int32 deadletter_after_attempt = 4;
}

enum TaskActivationStatus {
  TASK_ACTIVATION_STATUS_UNSPECIFIED = 0;
  TASK_ACTIVATION_STATUS_PENDING = 1;
  TASK_ACTIVATION_STATUS_PROCESSING = 2;
  TASK_ACTIVATION_STATUS_FAILURE = 3;
  TASK_ACTIVATION_STATUS_RETRY = 4;
  TASK_ACTIVATION_STATUS_COMPLETE = 5;
}

// Task message that is stored in Kafka.
// Once consumed, TaskActivations are wrapped with InflightActivation to track additional state
message TaskActivation {
  // A GUID for the task. Used to update tasks
  string id = 1;

  // The task namespace
  string namespace = 2;

  // The name of the task. This name is resolved within the worker
  string taskname = 3;

  // An opaque parameter collection. Could be JSON or protobuf encoded
  string parameters = 4;

  // A map of headers for the task.
  map<string, string> headers = 5;

  // The timestamp a task was stored in Kafka
  google.protobuf.Timestamp received_at = 6;

  // The task deadline. After this time the task is expired and should not be executed.
  optional google.protobuf.Timestamp deadline = 7;

  // Retry state
  RetryState retry_state = 8;
}

// Once a TaskActivation has been received by the task consumer it is wrapped
// with InflightActivation so that processing state can be tracked.
// This proto might not be used as InflightActivations don't need to cross process boundaries.
message InflightActivation {
  // The TaskActivation being tracked.
  TaskActivation activation = 1;

  // The current status
  TaskActivationStatus status = 2;

  // The original offset that the WorkerTask message had
  // Used to find contiguous blocks of completed tasks so that offsets
  // can be commit to Kafka
  int64 offset = 3;

  // The timestamp this task was added to PendingTask storage
  google.protobuf.Timestamp added_at = 4;

  // The timestamp that this task expires and should be deadlettered.
  google.protobuf.Timestamp deadletter_at = 5;

  // The timestamp that processing is expected to be complete by.
  // If processing is not complete by this time, a retry will be attempted.
  google.protobuf.Timestamp processing_deadline = 6;
}

////////////////////////////
// RPC messages and services
////////////////////////////
service ConsumerService {
  // Could be used by systems without access to kafka to create tasks
  rpc AddTask(AddTaskRequest) returns (AddTaskResponse);

  // Fetch a new task to process.
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {}

  // Update the state of a task with execution results. (also used in push models)
  rpc SetTaskState(SetTaskStateRequest) returns (SetTaskStateResponse) {}
}

message GetTaskRequest {}
message GetTaskResponse {
  optional TaskActivation task = 1;
}

message SetTaskStateRequest {
  string id = 1;
  TaskActivationStatus status = 2;

  // Set to true to have receive a new task in the response
  optional bool fetch_next = 3;
}
message SetTaskStateResponse {
  optional TaskActivation task = 1;
}

message AddTaskRequest {
  TaskActivation task = 1;
}
message AddTaskResponse {
  bool ok = 1;
  optional string error = 2;
}
