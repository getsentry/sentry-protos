syntax = "proto3";

package sentry_protos.sentry.v1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option deprecated = true;

message RetryState {
  // use sentry_protos.taskbroker.v1.RetryState instead.
  option deprecated = true;

  // Current attempt number
  int32 attempts = 1;

  // The classname or adapter type for the retry policy
  string kind = 2;

  // After this attempt the task should be discarded
  optional int32 discard_after_attempt = 3;

  // After this attempt the task should be put in the dead-letter-queue.
  optional int32 deadletter_after_attempt = 4;

  // Whether a task should be executed at most once.
  optional bool at_most_once = 5;
}

enum TaskActivationStatus {
  // use sentry_protos.taskbroker.v1.TaskActivationStatus instead.
  option deprecated = true;

  TASK_ACTIVATION_STATUS_UNSPECIFIED = 0;
  TASK_ACTIVATION_STATUS_PENDING = 1;
  TASK_ACTIVATION_STATUS_PROCESSING = 2;
  TASK_ACTIVATION_STATUS_FAILURE = 3;
  TASK_ACTIVATION_STATUS_RETRY = 4;
  TASK_ACTIVATION_STATUS_COMPLETE = 5;
}

// Task message that is stored in Kafka.
// Once consumed, TaskActivations are wrapped with InflightActivation to track
// additional state
message TaskActivation {
  // use sentry_protos.taskbroker.v1.TaskActivation instead.
  option deprecated = true;

  // A GUID for the task. Used to update tasks
  string id = 1;

  // The task namespace
  string namespace = 2;

  // The name of the task. This name is resolved within the worker
  string taskname = 3;

  // An opaque parameter collection. Could be JSON or protobuf encoded
  string parameters = 4;

  // A map of headers for the task.
  map<string, string> headers = 5;

  // The timestamp a task was stored in Kafka
  google.protobuf.Timestamp received_at = 6;

  // Unused. Use expires instead.
  optional google.protobuf.Timestamp deadline = 7 [deprecated = true];

  // Retry state
  RetryState retry_state = 8;

  // The duration in seconds that a worker has to complete task execution.
  // When an activation is moved from pending -> processing a result is expected
  // in this many seconds.
  uint64 processing_deadline_duration = 9;

  // The duration in seconds that a task has to start execution.
  // After received_at + expires has passed an activation is expired and will not be executed.
  optional uint64 expires = 10;

  // The duration in seconds that a task must wait to begin execution after it is emitted.
  // After received_at + delay has passed, the activation will become pending.
  optional uint64 delay = 11;
}

// Once a TaskActivation has been received by the task consumer it is wrapped
// with InflightActivation so that processing state can be tracked.
// This proto might not be used as InflightActivations don't need to cross
// process boundaries.
message InflightActivation {
  // No replacement, was not used.
  option deprecated = true;

  // The TaskActivation being tracked.
  TaskActivation activation = 1;

  // The current status
  TaskActivationStatus status = 2;

  // The original offset that the WorkerTask message had
  // Used to find contiguous blocks of completed tasks so that offsets
  // can be commit to Kafka
  int64 offset = 3;

  // The timestamp this task was added to PendingTask storage
  google.protobuf.Timestamp added_at = 4;

  // The timestamp that this task expires and should be deadlettered.
  google.protobuf.Timestamp deadletter_at = 5;

  // The timestamp that processing is expected to be complete by.
  // If processing is not complete by this time, a retry will be attempted.
  optional google.protobuf.Timestamp processing_deadline = 6;
}

////////////////////////////
// RPC messages and services
////////////////////////////
message Error {
  // No replacement, was not used.
  option deprecated = true;

  // Taken directly from the grpc docs.
  int32 code = 1;
  string message = 2;

  // A list of messages that carry any error details.
  repeated google.protobuf.Any details = 3;
}

service ConsumerService {
  // Use sentry_protos.taskbroker.v1.ConsumerService instead.
  option deprecated = true;

  // Fetch a new task activation to process.
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {}

  // Update the state of a task with execution results.
  rpc SetTaskStatus(SetTaskStatusRequest) returns (SetTaskStatusResponse) {}
}

message GetTaskRequest {
  // Use sentry_protos.taskbroker.v1.GetTaskRequest instead.
  option deprecated = true;

  optional string namespace = 1;
}
message GetTaskResponse {
  // Use sentry_protos.taskbroker.v1.GetTaskResponse instead.
  option deprecated = true;

  // If there are no tasks available, these will be empty
  optional TaskActivation task = 1;

  optional Error error = 3;
}

message FetchNextTask {
  // Use sentry_protos.taskbroker.v1.FetchNextTask instead.
  option deprecated = true;

  optional string namespace = 1;
}

message SetTaskStatusRequest {
  // Use sentry_protos.taskbroker.v1.SetTaskStatusRequest instead.
  option deprecated = true;

  string id = 1;
  TaskActivationStatus status = 3;

  // If fetch_next is provided, receive a new task in the response
  optional bool fetch_next = 4 [deprecated = true];
  optional string fetch_next_namespace = 5 [deprecated = true];
  optional FetchNextTask fetch_next_task = 6;
}

message SetTaskStatusResponse {
  // Use sentry_protos.taskbroker.v1.SetTaskStatusResponse instead.
  option deprecated = true;

  // The next task the worker should execute. Requires fetch_next to be set on the request.
  optional TaskActivation task = 1;

  optional Error error = 3;
}
